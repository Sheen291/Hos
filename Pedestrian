
/***************************TRƯỚC MẮT CỨ CHUNG CHUNG THẾ NÀY ĐÃ, SAU ĐÓ ĐỌC CHIA TỪNG FILE SAU**************************/

//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <string>

using namespace std;


/***************************** Định nghĩa Point **************************/
struct Point {
    
	double x, y;
    // Constructor để khởi tạo Point
   	Point() : x(0), y(0) {}
   	Point(double x, double y) : x(x), y(y) {}
	Point(double xy) : x(xy), y(xy) {}

   	// Method to print Point
   	void print() const {
   	    cout << "(" << x << ", " << y << ")";
   	}
};




/*************************** Định nghĩa Ward *****************************/
class Ward {
public:
    string nameWard;
    Point start, end;
    vector<Point> wall;

    // Constructor
	Ward() : nameWard(""), start(Point()), end(Point()), wall(vector<Point>()) {}
	
	Ward(string nameWard, Point start, Point end, vector<Point> wall)
        : nameWard(nameWard), start(start), end(end), wall(wall) {}

	void setStart(Point a) {
        start.x = a.x;
        start.y = a.y;
    }
   	void setEnd(Point a) {
        end.x = a.x;
        end.y = a.y;
    }
    // Method to add a wall coordinate
    void addWall(Point p) {
        wall.push_back(p);
    }

    // Print function for debugging (có hoặc không cũng được)
    void printWard() const {
        cout << "Ten Khoa: " << nameWard << endl;
        cout << "Toa do bat dau: "; start.print(); cout << endl;
        cout << "Toa do ket thuc: "; end.print(); cout << endl;
        cout << "Toa do tuong: ";
        for (const auto& w : wall) {
            w.print(); cout << " ";
        }
        cout << endl;
    }
};
/*
int main()
{   
    int N = 2;
    vector<Ward> wards(N);
    map<string, vector<double>> Mymap;
    Mymap["A"] = {1.0, 2.0};
    
    for(int i = 0; i < N; i++)
    {
        wards[i].setStart(Point(Mymap["A"][i]));
        
    }
    
}
*/



/************************** Định nghĩa Personality **********************/
class Personality {
private:
	double lambda;
	double positiveEmotionThreshold;
	double negativeEmotionThreshold;
	
public:
	//constructor
	Personality() : lambda(0.0), positiveEmotionThreshold(0.0), negativeEmotionThreshold(0.0) {}
	
	Personality(double lambda, double positiveEmotionThreshold, double negativeEmotionThreshold)
	: lambda(lambda), positiveEmotionThreshold(positiveEmotionThreshold), negativeEmotionThreshold(negativeEmotionThreshold) {}

	//thêm method sau nếu cần

};

class Open : public Personality {
public:
	Open() : Personality(1.0, 0.3, -0.7) {}
	//thêm method nếu cần
};

class Neurotic : public Personality {
public:
	Neurotic() : Personality(4.0, 0.6, -0.4) {}
	//thêm method nếu cần
};


/******************************* Định nghĩa Emotion **************************/
class Emotion {
private:
	double pleasure;
	double surprise;
	double anger;
	double fear;
	double hate;
	double sad;
public:
	Emotion() : pleasure(0.75), surprise(0.5), 
		    anger(-0.2), fear(-0.2),
		    hate(0.4), sad(-0.4) {}
double getPleasure() const {
        return pleasure;
    }
double getSurprise() const {
        return surprise;
    }
double getAnger() const {
        return anger;
    }
double getFear() const {
        return fear;
    }
double getHate() const {
        return hate;
    }
double getSad() const {
        return sad;
    }
};
/* dùng như này
int main() {
	Emotion emotion;
	double pleasureValue = emotion.getPleasure;
	cout<<pleasureValue<<endl;
}
*/
/************************************* EVENT **********************************/
class Event{
	public:
		vector<vector<double>> intensity;	//python 2i trả về mảng 6 phần tử mảng chứa (43 events) loại ảnh hướng cảm xúc
		vector<float> allTimeDistances;		//lưu lại thời gian cách nhau giữa 43 event vừa tạo
			//đang mặc định 43 events
		Event() : intensity(6, vector<double>(43, 0)), allTimeDistances(43, 0.0f>()) {}

		Event(const vector<vector<double>>& intensity, const vector<float>& allTimeDistances)
		: intensity(intensity), allTimeDistances(allTimeDistances) {}

		void printEvent() const {
        	cout << "Intensity: " << endl;
        	for (const auto& vec : intensity) {
        	    for (const auto& val : vec) {
        	        cout << val << " ";
        	    }
        	    cout << endl;
        	}
        	cout << "All Time Distances: " << endl;
        	for (const auto& time : allTimeDistances) {
        	    cout << time << " ";
        	}
        	cout << endl;
    		}
};

/*
int main() {
    // Khởi tạo một đối tượng Event với các giá trị mẫu
    vector<vector<double>> sampleIntensity = {
        {0., -0.3, 0.5, 0.4, -0.2},
        {0.1, -0.1, 0.1, 0.1, -0.6},
        {0.2, -0.2, 0.2, 0.5, -0.2},
	{0.3, -0.7, 0.9, 0.3, -0.2},
        {0.5, -0.3, 0.5, 0.6, -0.4},
        {0.1, -0.5, 0.1, 0.5, -0.7},
    };
    vector<float> sampleAllTimeDistances = {0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f};

    Event events(sampleIntensity, sampleAllTimeDistances);
    events.printEvent();

    return 0;
}
*/

/*
int main()
{
vector<vector<double>> allEvent(6, vector<double>(43, 0.0));	//43 events, mỗi event có 6 mảng ảnh hưởng
vector<float> allTimeDistances(43, 0.0f);	//43 khoảng thời gian

//đọc vào vector allEvents và allTimeDistances từ mã nguồn Python bài 2i để có dữ liệu

for (int i = 0; i < 6; ++i)
{
	for (int j = 0; j < 43; ++j) {
	
		//Phần này để thêm vào dữ liệu từ python cho allEvents và allTimeDistances	
	}
}
//giả sử đối tượng kiểu Pedestrian được tạo tên a

vector<vector<double>> intensity(6);
vector<float> timeDistances(20)
for (int i = 0; i < 20; i++)
{
	int X = rand() % 43;
	for (int j = 0; j < 6; j++)
	{
		intensity[j].push_back(allEvent[j][X]);
	}

	timeDistances[i] = allTimeDistances[X];
}
Event newEvent(intensity, timeDistances);

a.setEvent(newEvent);
//vậy là 1 đối tượng được add vào 20 event với 20 thời gian giữa các event
//vào trong thuộc tính events bằng setEvent() từ lớp cha Pedestrian
}
*/

/********************************** AGVEvent *********************/
class AGVEvent : public Event {
public:
	      //chưa có thông tin gì
};


/****************************** CÁC CLASS PEDESTRIAN **************************/
class Pedestrian {
	protected:
		int ID;
		Ward start;
		Ward end;
		vector<Ward> journey;
		double velocity;
		Personality personality;
		Emotion emotion;
		vector<Event> events;
		double walkingTime;
		double distance;
		double age;
		AGVEvent impactOfAGV;
		Point tempPoints;
	public:
		Pedestrian() : ID(0.0), start(Ward()), end(Ward()), journey(vector<Ward>()),
				velocity(0.0), personality(Personality()), emotion(Emotion()),
				walkingTime(0.0), distance(0.0), age(0.0), impactOfAGV(AGVEvent()), tempPoints(Point()) {}
				
		void setID(int id) { ID = id; }
    		void setStart(Ward s) { start = s; }
    		void setEnd(Ward e) { end = e; }
    		void setJourney(vector<Ward> j) { journey = j; }
    		void setVelocity(double v) { velocity = v; }
    		void setPersonality(Personality p) { personality = p; }
    		void setEmotion(Emotion e) { emotion = e; }
		void setEvent(const Event& event) { events.push_back(event); }
    		void setWalkingTime(double wt) { walkingTime = wt; }
    		void setDistance(double d) { distance = d; }
    		void setAge(double a) { age = a; }
    		void setImpactOfAGV(AGVEvent agv) { impactOfAGV = agv; }
    		void setTempPoints(Point tp) { tempPoints = tp; }


};
enum Walkability
		{
			crutches,
			sticks,
			wheelchairs,
			blind,
			noDisabilityNoOvertaking,
			noDisabilityOvertaking
		};

class Patient : public Pedestrian {
	public:

		Walkability walkability;

		Patient() : Pedestrian(), walkability(crutches) {}

    		void setWalkability(Walkability w) { walkability = w; }

    		void printPatient() const {
        		cout << "Patient ID: " << ID << endl;
        		cout << "Walkability: " << walkability << endl;
        		start.printWard();
        		end.printWard();
			}

};

class Visitor : public Pedestrian {
	public:

		Walkability walkability;
		
		Visitor() : Pedestrian(), walkability(noDisabilityNoOvertaking) {}
		
    		void setWalkability(Walkability w) { walkability = w; }

		void printVisitor() const {
			cout << "Visitor ID: " << ID << endl;
			cout << "Walkability: " << walkability << endl;
			start.printWard();
			end.printWard();
		}
};

class Personel : public Pedestrian {
	public:

		void printPersonel() const {
        		cout << "Personel ID: " << ID << endl;
        		start.printWard();
        		end.printWard();
		    }
};


int main() {
    // Example usage
    /*Point start(1, 2);
    Point end(3, 4);
    vector<Point> walls = {Point(0, 6), Point(6, 6), Point(6, 0), Point(0, 0)};

    Ward ward("B", start, end, walls);

    ward.printWard();

    cout << endl;
*/
    
	Point p1(0, 8), p2(0, 12);
	vector<Point> walls = {Point(0, 0), Point(20, 0), Point(20, 20), Point(0, 20)};
	Ward ward1("A", p1, p2, walls);
	Ward ward2("B", p2, Point(15, 0), walls);

	Open openPersonality;
	Emotion emotion;

	vector<vector<double>> intensity = {{0.1, 0.2, 0.3}, {0.4, 0.5, 0.6}};

	int numOfPatients = 3;
	vector<Patient> patients(numOfPatients);

	for (int i = 0; i < numOfPatients; ++i) {
        // Calculate attributes for each Patient
        int patientID = i + 1;
        double velocity = 1.5 + i * 0.1; // Example variation in velocity
        double walkingTime = 30.0 + i * 5; // Example variation in walking time
        double distance = 100.0 + i * 10; // Example variation in distance
        double age = 25.0 + i * 2; // Example variation in age
        Patient::Walkability walkability = static_cast<Patient::Walkability>(i % 4); // Cycle through walkability types

        // Set attributes for each Patient object
        patients[i].setID(patientID);
        patients[i].setStart(ward1);
        patients[i].setEnd(ward2);
        patients[i].setJourney({ward1, ward2});
        patients[i].setVelocity(velocity);
        patients[i].setPersonality(openPersonality);
        patients[i].setEmotion(emotion);
        patients[i].setWalkingTime(walkingTime);
        patients[i].setDistance(distance);
        patients[i].setAge(age);
        patients[i].setTempPoints(p1);
        patients[i].setWalkability(walkability);
    }
	for (const auto& patient : patients) {
        patient.printPatient();
        cout << endl<<endl<<endl;
    }
    int M = 50; //(tổng người)
    vector<Pedestrian*> pedestrians;
    for (int i = 0; i < M; ++i)
    {
	    //Tạm bợ
	    if (i % 3 == 0) {
            pedestrians.push_back(new Patient());
        } else if (i % 3 == 1) {
            pedestrians.push_back(new Visitor());
        } else {
            pedestrians.push_back(new Personel());
        }
    }
	
	for (int i = 0; i < M; ++i)
	{
	    pedestrians[i]->setID(i+1);
	}
    return 0;
    
	
}
