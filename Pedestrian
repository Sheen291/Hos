//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <string>

using namespace std;


/***************************** Định nghĩa Point **************************/
struct Point {
    
	double x, y;
    // Constructor để khởi tạo Point
   	Point() : x(0), y(0) {}
   	Point(double x, double y) : x(x), y(y) {}

   	// Method to print Point
   	void print() const {
   	    cout << "(" << x << ", " << y << ")";
   	}
};




/*************************** Định nghĩa Ward *****************************/
class Ward {
public:
    string nameWard;
    Point start;
    Point end;
    vector<Point> wall;

    // Constructor
    Ward(string nameWard, Point start, Point end, vector<Point> wall)
        : nameWard(nameWard), start(start), end(end), wall(wall) {}

    // Method to add a wall coordinate
    void addWall(Point p) {
        wall.push_back(p);
    }

    // Print function for debugging (có hoặc không cũng được)
    void printWard() const {
        cout << "Ten Khoa: " << nameWard << endl;
        cout << "Toa do bat dau: "; start.print(); cout << endl;
        cout << "Toa do ket thuc: "; end.print(); cout << endl;
        cout << "Toa do tuong: ";
        for (const auto& w : wall) {
            w.print(); cout << " ";
        }
        cout << endl;
    }
};



/************************** Định nghĩa Personality **********************/
class Personality {
private:
	double lambda;
	double positiveEmotionThreshold;
	double negativeEmotionThreshold;
	
public:
	//constructor
	Personality(double lambda, double positiveEmotionThreshold, double negativeEmotionThreshold)
	: lambda(lambda), positiveEmotionThreshold(positiveEmotionThreshold), negativeEmotionThreshold(negativeEmotionThreshold) {}

	//thêm method sau nếu cần

};

class Open : public Personality {
public:
	Open() : Personality(1.0, 0.3, -0.7) {}
	//thêm method nếu cần
};

class Neurotic : public Personality {
public:
	Neurotic() : Personality(4.0, 0.6, -0.4) {}
	//thêm method nếu cần
};


/******************************* Định nghĩa Emotion **************************/
class Emotion {
private:
	double pleasure;
	double surprise;
	double anger;
	double fear;
	double hate;
	double sad;
public:
	Emotion() : pleasure(0.75), surprise(0.5), 
		    anger(-0.2), fear(-0.2),
		    hate(0.4), sad(-0.4) {}
double getPleasure() const {
        return pleasure;
    }
double getSurprise() const {
        return surprise;
    }
double getAnger() const {
        return anger;
    }
double getFear() const {
        return fear;
    }
double getHate() const {
        return hate;
    }
double getSad() const {
        return sad;
    }
};
/* dùng như này
int main() {
	Emotion emotion;
	double pleasureValue = emotion.getPleasure;
	cout<<pleasureValue<<endl;
}
*/


/****************************** Định nghĩa AGVEvent ***************************/
class AGVEvent {
private:
	std::vector<std::vector<double>>  intensity;	//vector lưu 6 cái vector chứa n cái emotionvalue tạo từ python
	float time;		//time được tính từ hàm python câu 2j theo phân phối chuẩn

public:
	AGVEvent(std::vector<std::vector<double>> intensity, float time) : intensity(intensity), time(time) {}

};
/****************************** CÁC CLASS PEDESTRIAN **************************/
class Pedestrian {
	private:
		int ID;
		Ward start;
		Ward end;
		vector<Ward> journey;
		double velocity;
		Personality personality;
		Emotion emotion;
		double walkingTime;
		double distance;
		double age;
		AGVEvent impactOfAGV;
		Point tempPoints;
	
};

class Patient : public Pedestrian {
	public:
		enum Walkability
		{
			crutches,
			sticks,
			wheelchairs,
			blind
		};
		/*muốn switch case để thêm dữ liệu thì Patient::Walkability a;
		switch(a) {  (a chạy từ 0 đến 3)
		*/
		
};

class Visitor : public Pedestrian {
	public:
		enum Walkability	//tương tự Patient
		{
			noDisabilityNoOvertaking,
			noDisabilityOvertaking
		};
};

class Personel : public Pedestrian {
	
};


int main() {
    // Example usage
    Point start(1, 2);
    Point end(3, 4);
    vector<Point> walls = {Point(0, 6), Point(6, 6), Point(6, 0), Point(0, 0)};

    Ward ward("B", start, end, walls);

    ward.printWard();

    return 0;
}
