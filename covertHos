#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <lib/nlohmann/json.hpp>

using json = nlohmann::json;
using namespace std;

std::map<std::string, std::vector<float>> readHospitalData(const char *fileName)
{
	map<std::string, std::vector<float>> map;
	ifstream input<fileName>;
	
	std::string delimiter = " ";
	std::string comma = ",";
	
	int lineNo = 1;
	
	for (std::string line; getline(input, line);)
	{
		vector<float> v;
		if (lineNo == 1)		//đọc số khoa của bv
		{
			v.push_back(stof(line));
			map["NumofDepartment"] = v;
		}
		else if (lineNo>=2&&lineNo<=10)
		{
			size_t pos = 0;
			size_t pos2 = 0;
			std::string token, token2;
			int count = 0;
			std::string DeName;
			
			//đọc tọa độ và lưu tên khoa vào DeName
			while ((pos = line.find(delimiter)) != std::string::npos)
			{
				token = line.substr(0,pos);
				if (count<2)
				{
					while ((pos2 = token.find(comma)) != std::string::npos)
					{
					token2 = token.substr(0,pos2);
					v.push_back(stof(token2));
					line.erase(0,pos2 + comma.length());
					}
				}
				else if (count ==2)
				{
					v.push_back(stof(token));
				}
				else
				{
					DeName.assign(token);
				}
				line.erase(0,pos + delimiter.length());
				count++;
			}
			v.push_back(stof(line));
			map[DeName] = v;	
		}
		else
		{
			size_t pos = 0;
			size_t pos2 = 0;
			std::string token, token2;
			std::string PosofA;
			std::string PosofStartAGV;
			std::string PosofEndAGV;
			std::string PosofHos;
			
			//đọc tọa độ và lưu tên khoa vào DeName
			while ((pos = line.find(delimiter)) != std::string::npos)
			{
				token = line.substr(0,pos);
				while ((pos2 = token.find(comma)) != std::string::npos)
				{
					token2 = token.substr(0,pos2);
					v.push_back(stof(token2));
					line.erase(0,pos2 + comma.length());
				}
				line.erase(0,pos + delimiter.length());
			}
			v.push_back(stof(line));
			switch (lineNo)
			{
				case 11:
					map[PosofA] = v;
					break;
				case 12:
					map[PosofStartAGV] = v;
					break;
				case 13:
					map[PosofEndAGV] = v;
					break;
				case 14:
					map[PosofHos] = v;
					break;
				default:
					break;
			}
		}
		lineNo++;
	}
	return map;
}

std::vector<json> convertHospitalData(
	std::map<std::string, std::vector<float>> hospitalData)	//truyền map vừa tạo ở trên xuống
{
	std::vector<json> data;
	for (auto elem : hospitalData)
	{
		if (elem.first == "NumofDepartment")
		{continue;}
		if (elem.first == "PosofA")
		{
			int  num = elem.second.size();
			for (int i = 0; i < num; i++)
			{
				;
			}
		}
		
	}
}
