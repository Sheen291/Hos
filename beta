std::vector<double> Utility::getPedesVelocityBasedDDis(json inputData,
                                                       float deviationParam)
{
    std::vector<double> v;
    /******************************************
    

    int lowerBound = int(inputData["walkability"]["distribution"]["normal"]["lowerBound"]);
    int upperBound = int(inputData["walkability"]["distribution"]["normal"]["upperBound"]);
    int sumOfValues = int(inputData["numOfAgents"]["value"];
    int num_samples = int(inputData["walkability"]["distribution"]["normal"]["samples"]);

    //Giá trị trung bình và độ lệch chuẩn
    float mean = sumOfValues / num_samples;
    float std_dev = (mean - lowerBound) / 3;    // Giả sử dữ liệu sử dụng nằm trong khoảng 3 độ lệch chuẩn
    int sum=0, alpha = 0.05;

    std::random_device rd;
    std::mt19937 gen(rd());
    std::normal_distribution<double> distribution(mean, std_dev);
    while (check > alpha)
    {
        std::vector<float> p;
        for (int i=0; i<num_samples; i++)      //tạo mẫu dữ liệu
        {
            int random_number = distribution(gen);
            sum+=random_number;
            p.push_back(random_number);
        }
        for (int i=0; i<num_samples; i++)        //chuẩn hóa mẫu để tổng bằng numOfValues
        {
            p[i] = p[i] * sumOfValues / sum;
        }
        //Kiểm định Shapiro với alpha = 0.05
        
        /*gọi python vào r truyền vector p cho nó để kiểm định*/
        
    }
    ******************************************/


  /*
//chuẩn hóa lại phần trăm 6 loại của Agents
    float perNoDisabilityWithoutOvertaking =
        float(inputData["p1"]["value"]) * deviationParam;
    float perNoDisabilityWithOvertaking =
        float(inputData["p2"]["value"]) * deviationParam;
    float perWalkingWithCrutches =
        float(inputData["p3"]["value"]) * deviationParam;
    float perWalkingWithSticks = float(inputData["p4"]["value"]) * deviationParam;
    float perWheelchairs = float(inputData["p5"]["value"]) * deviationParam;
    // float perTheBlind = inputData["p6"]["value"];
    float perTheBlind =
        100 - (perNoDisabilityWithoutOvertaking + perNoDisabilityWithOvertaking +
               perWalkingWithCrutches + perWalkingWithSticks + perWheelchairs);

    const int nrolls = 10000; // number of experiments
    const int numPedes =
        int(int(inputData["numOfAgents"]["value"]) *
            deviationParam); // maximum number of pedes to distribute

    std::default_random_engine generator;
    std::discrete_distribution<int> distribution{perNoDisabilityWithoutOvertaking,
                                                 perNoDisabilityWithOvertaking,
                                                 perWalkingWithCrutches,
                                                 perWalkingWithSticks,
                                                 perWheelchairs,
                                                 perTheBlind};
//sẽ sinh ra ngẫu nhiên từ 1 đến 6

    int p[6] = {};

    for (int i = 0; i < nrolls; ++i)
    {
        int number = distribution(generator);
        ++p[number];
    }
//đã có giá trị sau 10000 lần thử, tức là có mảng số người trong 6 kiểu người trên 10000 người
    */


    std::map<int, float> map;
    map[0] = V1;    //V1..V6 đã khai báo ở Constant.h
    map[1] = V2;
    map[2] = V3;
    map[3] = V4;
    map[4] = V5;
    map[5] = V6;
    /*map[0] = float(inputData["walkability"]["distribution"]["noDisabilityNoOvertaking"]["velocity"]);
    .
    .
    .
    */
    for (int i = 0; i < 6; ++i)
    {
        for (int j = 0; j < p[i]; j++)
        {
            v.push_back(map[i]);
        }
    }
    int curSize = v.size();
    for (int i = 0; i < sumOfValues - curSize; i++)
    {
        v.push_back(map[0]);
    }

    return v;
}
